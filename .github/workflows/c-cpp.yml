name: Build and Release

on:
  push:
    branches: [ "master" ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Important for git history-based versioning
    
    - name: Generate version
      id: version
      run: |
        # Extract version from PKGBUILD
        if [ -f "PKGBUILD" ]; then
          PKGBUILD_VERSION=$(grep -E '^pkgver=' PKGBUILD | cut -d'=' -f2)
          if [ -n "$PKGBUILD_VERSION" ]; then
            VERSION="$PKGBUILD_VERSION"
            echo "Using version from PKGBUILD: $VERSION"
          fi
        fi
        
        # If PKGBUILD version is not found, fall back to git tag
        if [ -z "$PKGBUILD_VERSION" ]; then
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            # No tag exists, create date-based version
            VERSION="0.2.0-$(date +'%Y%m%d%H%M')"
            echo "No version found in PKGBUILD or git tags. Using fallback version: $VERSION"
          else
            # Tag exists, use it
            VERSION="${LATEST_TAG#v}"  # Remove 'v' prefix if present
            echo "Using version from git tag: $VERSION"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Using final version: $VERSION"
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make libcurl4-openssl-dev libjson-c-dev libncurses-dev
    
    - name: Build project
      run: |
        make rebuild
        
    - name: Create package
      id: package
      run: |
        mkdir -p dist
        cp anime-cli dist/
        cp README.md LICENSE dist/
        echo "${{ steps.version.outputs.version }}" > dist/VERSION
        cd dist
        tar -czvf ../anime-cli.tar.gz *
    
    - name: Create Release and Upload Asset
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        RELEASE_NOTES="Automated build from commit ${{ github.sha }}\n\n**Changes in this release:**\n${{ github.event.head_commit.message }}"
        
        # Check if this release already exists
        if gh release view "v$VERSION" &>/dev/null; then
          echo "Release v$VERSION already exists, updating it"
          gh release upload "v$VERSION" "./anime-cli.tar.gz#anime-cli-$VERSION.tar.gz" --clobber
        else
          echo "Creating new release v$VERSION"
          gh release create "v$VERSION" \
            --title "Release $VERSION" \
            --notes "$RELEASE_NOTES" \
            "./anime-cli.tar.gz#anime-cli-$VERSION.tar.gz" \
            --target ${{ github.ref }}
        fi